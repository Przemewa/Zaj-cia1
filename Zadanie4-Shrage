
#include "pch.h"
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <limits>

class Job
{
public:
	int R; //czas dostarczania
	int P; //czas trwania
	int Q; //czas stygniecia

	int IndekPoczatkowy;

	Job job() {};
};

int LiczC_MAX(std::vector<Job> & jobs) {
	int m = 0, c = 0;
	for (int i = 0; i < jobs.size(); i++) {
		m = std::max(jobs[i].R, m) + jobs[i].P;
		c = std::max(c, m + jobs[i].Q);
	}
	return c;
}


//znajduje dostepne zadania sposrod niewykonanych jeszcze zadan

std::vector<int> ZnajdzIndeksDostepnych(std::vector<Job> & jobs, int czas) {
	std::vector<int> result;
	for (int i = 0; i < jobs.size(); i++) {
		if (jobs[i].R <= czas) {
			result.push_back(i);
		}
	}

	return result;
}

// Szukamy zadania o największym Q

std::vector<Job> & dodajzMAX_Q(std::vector<Job> & jobs, std::vector<int> & DostepneZadniaIndeks,
	std::vector<Job> &Klejnosc, int & czas) {

	int MAX_QIndeks = DostepneZadniaIndeks[0];
	int MAX_Q = jobs[MAX_QIndeks].Q;

	for (int index : DostepneZadniaIndeks) {
		if (MAX_Q < jobs[index].Q) {
			MAX_Q = jobs[index].Q;
			MAX_QIndeks = index;

		}
		else if (MAX_Q == jobs[index].Q) { // jeżeli takie same Q to bierzemy o mniejszym indexie początkowym

			if (jobs[MAX_QIndeks].IndekPoczatkowy > jobs[index].IndekPoczatkowy) {
				MAX_Q = jobs[index].Q;
				MAX_QIndeks = index;
			}
		}
	}


	Klejnosc.push_back(jobs[MAX_QIndeks]);
	czas += jobs[MAX_QIndeks].P;
	jobs[MAX_QIndeks].R = std::numeric_limits<int>::max();

	return Klejnosc; //kolejnosc uszeregowania
}

int main(int argc, char **argv) {

	std::vector<Job> jobs, result;
	Job tymczasJob;

	// czytanie danych
	std::ifstream plik("in100.txt");
	int IloscWczytanychZadan = 0;
	plik >> IloscWczytanychZadan;

	for (int i = 0; i < IloscWczytanychZadan; i++) {
		plik >> tymczasJob.R >> tymczasJob.P >> tymczasJob.Q;
		tymczasJob.IndekPoczatkowy = i;

		jobs.push_back(tymczasJob);
	}

	// Sortowanie vector prac po R rosnąco
	std::sort(jobs.begin(), jobs.end(), [](const Job & first, const Job & second) { return first.R < second.R; });



	Job JobzMIN_R = jobs[0];
	int czas = JobzMIN_R.R;

	int IloscZadan = jobs.size();
	std::vector<int> IndeksDostepnychZadan;

	// Shrange zwykłe

	while (result.size() != IloscZadan) {

		// Z puli zadań wyszukujemy te indexy zadań których R jest większe bądź równe czas
		// oraz nie bierzemy pod uwage zadań uprzednio dodanych do kolekcji result

		IndeksDostepnychZadan = ZnajdzIndeksDostepnych(jobs, czas);

		// W przypadku gdy obecnie nie ma żdanych dostępnych zadań w czasie czas
		// To w kolekcji z zadaniami wyszukujemy pierwsze zadanie którego R jest większe od czas

		if (IndeksDostepnychZadan.size() == 0) {
			// W tym przypadku znaleźć pierwsze większe R niz czas z vectora jobs i przypisac je do czasu
			for (int i = 0; i < jobs.size(); i++) {
				if (jobs[i].R > czas && (jobs[i].R != std::numeric_limits<int>::max())) {
					czas = jobs[i].R;
					// kiedy znaleźliśmy następne czas dla którego będą jakieś zadania, to ponownie wyszukujemy dostępne zadania
					IndeksDostepnychZadan = ZnajdzIndeksDostepnych(jobs, czas);
					break;
				}
			}

		}

		
		result = dodajzMAX_Q(jobs, IndeksDostepnychZadan, result, czas);

	}


	int C_max = LiczC_MAX(result);
	std::cout << " C_max = " << C_max << "\n";

	return 0;
}
