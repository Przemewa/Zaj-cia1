#include "pch.h"
#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <ctime>
#define d 7					//	liczba cyfr
using namespace std;

int T[d];
int dlugosc_pierwszej;
int dluzsza;
int najkrotsze = 0;			//	najkrotsze rozwiazanie funkcji permutuj;


void przepisz_tablice(int *tab1, int *tab2, int j)
{
	for (int i = 0; i < j; i++)
	{
		tab1[i] = tab2[i];
	}
}

int licz_dlugosc(int *tab1, int *tab2, int k)
{
	dlugosc_pierwszej = tab1[0];
	dluzsza = dlugosc_pierwszej;

	for (int i = 0; i < k - 1; i++)
	{
		if (dlugosc_pierwszej + tab1[1 + i] > dluzsza + tab2[0 + i])
		{
			dluzsza = dlugosc_pierwszej + tab1[1 + i];
		}
		else
		{
			dluzsza = dluzsza + tab2[0 + i];
		}
		dlugosc_pierwszej = dlugosc_pierwszej + tab1[1 + i];
	}
	dluzsza = dluzsza + tab2[d - 1];
	return dluzsza;
}

void permutuj(int *tab1, int *tab2, int k)
{
	if (k == 0)
	{
		int a = licz_dlugosc(tab1, tab2, d);
		printf("%d  ", a);
		if (najkrotsze == 0)
		{
			najkrotsze = a;
			przepisz_tablice(T, tab1, d);		//	przepisuje tablice o okreslonym rozmiarze
		}
		else if (najkrotsze > a)
		{
			najkrotsze = a;
			przepisz_tablice(T, tab1, d);
		}
		//printf("%d %d %d %d %d \n", tab1[0], tab1[1], tab1[2], tab1[3], tab1[4]);
	}
	else
		for (int i = 0; k - 1 >= i; i++)
		{
			swap(tab1[i], tab1[k - 1]);
			swap(tab2[i], tab2[k - 1]);
			permutuj(tab1, tab2, k - 1);
			swap(tab1[i], tab1[k - 1]);
			swap(tab2[i], tab2[k - 1]);
		}
}

int main()
{
	int tab1[d] = { 12,7,8,3,2,22,12 };
	int tab2[d] = { 1,2,7,12,4,21,12 };

	permutuj(tab1, tab2, d);
	//printf("%d", licz_dlugosc(tab1,tab2,5));
	printf("Dlugosc wykonania najkrotszej permutacji   %d\n", najkrotsze);

	printf("Wybrana najkrotsza kolejnosc pierwszych zadan.\n");

	for (int i = 0; i < d; i++)
	{
		printf("%d  ", T[i]);
	}

}
